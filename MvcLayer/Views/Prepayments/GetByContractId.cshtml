@model IEnumerable<MvcLayer.Models.PrepaymentViewModel>
@inject BusinessLayer.Interfaces.ContractInterfaces.IContractService Contract
@inject BusinessLayer.Interfaces.ContractInterfaces.IAmendmentService Amendment

@{
    ViewData["Title"] = string.Empty;
    var contractId = Model.FirstOrDefault()?.ContractId;
    if (contractId is not null)
    {
        var number = Contract.GetById((int)contractId).Number;
        ViewData["Title"] = $"Авансы по договору № {number}";
    }
    bool isAdmin = true;

    //TODO:сделать как объемах месяц слово год - число
}

<div class="dm-overlay">
    <div class="dm-table">
        <div class="dm-cell">
            <div class="dm-modal">
                <div class="top-modal-block">
                    <label class="my-modal-title">@ViewData["Title"]</label>
                    @if (@contractId != null && @contractId > 0)
                    {
                        <a asp-controller="Contracts" asp-action="Details" asp-route-id="@contractId" class="close-btn"></a>
                    }
                    @if (@contractId == null || @contractId == 0)
                    {
                        <a asp-controller="Contracts" asp-action="" class="close-btn"></a>
                    }
                </div>
                <hr class="modal-line" />
                <table class="table table-striped table-bordered">
                    @*!!!план без изменений!!*@
                    <tr>
                        <th>
                            Основание
                        </th>
                        @foreach (var item in Model.Where(x => x.IsChange != true))
                        {
                            <th>
                                @item.Period?.ToString("MMM yyyy")                               
                            </th>
                        }
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.CurrentValue)
                        </th>
                        @foreach (var item in Model.Where(x => x.IsChange != true))
                        {
                            <td>
                                @Html.DisplayFor(modelItem => item.CurrentValue)
                            </td>
                        }
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.TargetValue)
                        </th>
                        @foreach (var item in Model.Where(x => x.IsChange != true))
                        {
                            <td>
                                @Html.DisplayFor(modelItem => item.TargetValue)
                            </td>
                        }
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.WorkingOutValue)
                        </th>
                        @foreach (var item in Model.Where(x => x.IsChange != true))
                        {
                            <td>
                                @Html.DisplayFor(modelItem => item.WorkingOutValue)
                            </td>
                        }
                    </tr>


                    @if (Model.Where(x => x.IsChange == true).Count() > 0)
                    {
                        @foreach (var item2 in Model.Where(x => x.IsChange == true))
                        {
                            var amendment = @item2?.PrepaymentAmendments?.FirstOrDefault(x => x.PrepaymentId == item2.Id)?.Amendment;

                            <tr>@amendment?.Number</tr>
                            <tr>
                                <th class="text-uppercase fw-light">
                                    cогласно графику платежей в редакции ДС @amendment?.Number к договору
                                </th>
                                @foreach (var item in Model.Where(x => x.IsChange == true))
                                {
                                    <th>
                                        @item.Period?.ToString("MMM yyyy")
                                    </th>
                                }
                               
                            </tr>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.CurrentValue)
                                </th>
                                @foreach (var item in Model.Where(x => x.IsChange == true))
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CurrentValue)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.TargetValue)
                                </th>
                                @foreach (var item in Model.Where(x => x.IsChange == true))
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TargetValue)
                                    </td>
                                }
                            </tr>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.WorkingOutValue)
                                </th>
                                @foreach (var item in Model.Where(x => x.IsChange == true))
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.WorkingOutValue)
                                    </td>
                                }
                            </tr>
                        }
                    }
                    @*!!!факт!!*@
                    <tr>
                        <th class="text-uppercase fw-light">
                            Получено фактически
                        </th>
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.CurrentValueFact)
                        </th>
                        @foreach (var item in Model)
                        {
                            <td>
                                @Html.DisplayFor(modelItem => item.CurrentValueFact)
                            </td>
                        }
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.TargetValueFact)
                        </th>
                        @foreach (var item in Model)
                        {
                            <td>
                                @Html.DisplayFor(modelItem => item.TargetValueFact)
                            </td>
                        }
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.WorkingOutValueFact)
                        </th>
                        @foreach (var item in Model)
                        {
                            <td>
                                @Html.DisplayFor(modelItem => item.WorkingOutValueFact)
                            </td>
                        }
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>
