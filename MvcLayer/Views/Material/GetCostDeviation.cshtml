@model IEnumerable<MvcLayer.Models.MaterialViewModel>
@inject BusinessLayer.Interfaces.ContractInterfaces.IContractService Contract
@inject BusinessLayer.Interfaces.ContractInterfaces.IScopeWorkService ScopeWork

@{
    ViewData["Title"] = "Мониторинг отклонения стоимости по материалам";

    List<DateTime> listDate = ViewBag.ListDate;
}

<style>
    table {
        text-align: center;
    }

    .wrapper-table {
        width: 65vw;
        height: 75vh;
        overflow: scroll;
    }

   
</style>
 
<div class="dm-overlay">
    <div class="dm-table">
        <div class="dm-cell">
            <div class="dm-modal">
                <div class="top-modal-block">
                    <label class="my-modal-title">@ViewData["Title"]</label>
                    <a asp-controller="Home" asp-action="" class="close-btn"></a>
                </div>
                <hr class="modal-line" />
                <div style=" overflow-x:scroll;">
                    <table class="table table-bordered table-main table-main-short">
                        <thead class="text-center text-white align-top" style="background-color:#2e354e;">
                            <tr>
                                <th rowspan="3">
                                    Номер и дата договора
                                </th>
                                <th rowspan="3">
                                    Наименование объекта
                                </th>
                                <th rowspan="3">
                                    Сметная стоимость материалов по договору
                                </th>
                                <th colspan="@(listDate.Count*3)">в том числе</th>
                                <th rowspan="3">
                                    Отклонение всего
                                </th>
                            </tr>
                            <tr>
                                @foreach (var item in listDate)
                                {
                                    <th colspan="3">
                                        @item.ToString("MMMM yyyy")
                                    </th>
                                }
                            </tr>
                            <tr>
                                @foreach (var item in listDate)
                                {
                                    <th>
                                        План
                                    </th>
                                    <th>
                                        Факт
                                    </th>
                                    <th>
                                        Отклонение
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                var contract = @Contract.GetById((int)item?.ContractId);
                                var cost = item.MaterialCosts;
                                var deviationTotal = 0M;
                                <tr>
                                    <td>
                                        @contract.Number <br>
                                        @contract.Date
                                    </td>
                                    <td>
                                        @contract.NameObject
                                    </td>
                                    <td>
                                        @* @ScopeWork.Find(x=>x.ContractId == item.ContractId && x.IsOwnForces != true).LastOrDefault().SWCosts.Where(x). *@
                                    </td>

                                    @foreach (var item2 in listDate)
                                    {
                                        <td class="text-end">
                                            @{
                                                var resultPlan = cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultPlan?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var resultFact = cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultFact?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var deviation = resultPlan - resultFact;
                                                deviationTotal += deviation is not null ? (decimal)deviation : 0M;
                                            }
                                            @deviation?.ToString("N2")
                                        </td>
                                    }

                                    <td class="text-end">
                                        @deviationTotal.ToString("N2")
                                    </td>                                    
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>