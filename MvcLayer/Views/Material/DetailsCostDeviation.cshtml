@model IEnumerable<MvcLayer.Models.ContractViewModel>
@inject BusinessLayer.Interfaces.ContractInterfaces.IContractService Contract
@inject BusinessLayer.Interfaces.ContractInterfaces.IMaterialService Material

@{
    ViewData["Title"] = "Мониторинг отклонения стоимости по материалам";

    DateTime startPeriod = new DateTime(4000, 1, 1);
    DateTime endPeriod = new DateTime(1000, 1, 1);
    foreach (var item in Model)
    {
        foreach (var item2 in item.MaterialGcs)
        {
            foreach (var item3 in item2.MaterialCosts)
            {
                if (startPeriod > item3.Period)
                {
                    startPeriod = (DateTime)item3.Period;
                }
                if (endPeriod < item3.Period)
                {
                    endPeriod = (DateTime)item3.Period;
                }
            }
        }
    }
}

<style>
    table {
        text-align: center;
    }

    .wrapper-table {
        width: 65vw;
        height: 75vh;
        overflow: scroll;
    }

        .wrapper-table tbody, td, tfoot, th, thead, tr {
            border-color: #373b3e;
            border-style: solid;
            border-width: 0;
        }

        .wrapper-table table td:first-child {
            position: sticky;
            z-index: 10;
            left: -1px;
            background-color: #adadad;
        }

        .wrapper-table table tr:first-child th:first-child {
            position: sticky;
            z-index: 20;
            left: -1px;
            top: 0;
        }

        .wrapper-table thead {
            position: sticky;
            z-index: 20;
            left: 0;
            top: 0;
            opacity: 1;
            border-color: #373b3e;
        }

    .second-td-elem {
        /* z-index: 5 !important; */
        box-shadow: inset 0 0 0 9999px #bdbac3 !important;
        background-color: grey !important;
    }

    .Agreement {
        background-color: #ccf3ff !important;
    }

    .SubContract {
        background-color: #d8f3d8 !important;
    }

    .Multiple {
        background-color: lightsalmon !important;
    }

    .square {
        width: 20px;
        height: 20px;
    }
</style>

<div class="dm-overlay">
    <div class="dm-table">
        <div class="dm-cell">
            <div class="dm-modal">
                <div class="top-modal-block">
                    <label class="my-modal-title">@ViewData["Title"]</label>
                    <a asp-controller="Material" asp-action="GetCostDeviation" class="close-btn"></a>
                </div>
                <div style="display:flex">
                    <div class="square Agreement"></div>
                    <label> - Соглашения с филиалом </label>
                    <div class="square SubContract k-ml-1"></div>
                    <label> - Договор Субподряда </label>
                    <div class="square Multiple k-ml-1"></div>
                    <label> - Подобъект</label>
                </div>
                <hr class="modal-line" />
                <div class="wrapper-table">
                    <table class="table table-bordered table-main table-main-short">
                        <thead class="table-dark text-center text-white align-top" style="position:sticky">
                            <tr>
                                <th rowspan="3">
                                    Номер и дата договора
                                </th>
                                <th rowspan="3">
                                    Наименование объекта
                                </th>
                                <th rowspan="3">
                                    Сметная стоимость материалов по договору
                                </th>
                                <th colspan="@(((endPeriod.Year - startPeriod.Year) * 12 + ((endPeriod.Month - startPeriod.Month) + 1))*3)">в том числе</th>
                                <th rowspan="3">
                                    Отклонение всего
                                </th>
                            </tr>
                            <tr>
                                @for (var item = startPeriod; item <= endPeriod; item = item.AddMonths(1))
                                {
                                    <th colspan="3">
                                        @item.ToString("MMMM-yyyy")
                                    </th>
                                }
                            </tr>
                            <tr>
                                @for (var item = startPeriod; item <= endPeriod; item = item.AddMonths(1))
                                {
                                    <th>
                                        План
                                    </th>
                                    <th>
                                        Факт
                                    </th>
                                    <th>
                                        Отклонение
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Where(m =>
                            m.IsAgreementContract == false && m.IsOneOfMultiple == false && m.IsSubContract == false))
                            {
                                var contract = item;
                                var list = item.MaterialGcs.LastOrDefault();
                                var cost = list != null ? list.MaterialCosts : null;
                                var deviationTotal = 0M;
                                <tr>
                                    <td>
                                        @contract.Number <br>
                                        от<br>
                                        @contract.Date.Value.ToString("dd-MMMM-yyyy")
                                    </td>
                                    <td>
                                        @contract.NameObject
                                    </td>
                                    <td>
                                        @{
                                            var sum = 0M;
                                            for (var itemTime = startPeriod; itemTime <= endPeriod; itemTime = itemTime.AddMonths(1))
                                            {
                                                var ob = item.MaterialGcs.LastOrDefault();
                                                if (ob != null)
                                                {
                                                    var o = ob.MaterialCosts.Where(m => m.Price != null && m.Period.Value.Month == itemTime.Month
                                                    && m.Period.Value.Year == itemTime.Year).Select(m => m.Price).FirstOrDefault();
                                                    if (o != null)
                                                        sum = sum + (decimal)o;
                                                }
                                            }
                                            <span>@sum.ToString("N2")</span>
                                        }
                                    </td>

                                    @for (var item2 = startPeriod; item2 <= endPeriod; item2 = item2.AddMonths(1))
                                    {
                                        <td class="text-end">
                                            @{
                                                var resultPlan = cost != null && cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultPlan?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var resultFact = cost != null && cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultFact?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var deviation = resultPlan - resultFact;
                                                deviationTotal += deviation is not null ? (decimal)deviation : 0M;
                                            }
                                            @deviation?.ToString("N2")
                                        </td>
                                    }

                                    <td class="text-end">
                                        @deviationTotal.ToString("N2")
                                    </td>
                                </tr>
                            }

                            @foreach (var item in Model.Where(m =>
                            m.IsAgreementContract == true && m.IsOneOfMultiple == false && m.IsSubContract == false))
                            {
                                var contract = item;
                                var list = item.MaterialGcs.LastOrDefault();
                                var cost = list != null ? list.MaterialCosts : null;
                                var deviationTotal = 0M;
                                <tr class="Agreement">
                                    <td>
                                        @contract.Number <br>
                                        от<br>
                                        @contract.Date.Value.ToString("dd-MMMM-yyyy")
                                    </td>
                                    <td>
                                        @contract.NameObject
                                    </td>
                                    <td>
                                        @{
                                            var sum = 0M;
                                            for (var itemTime = startPeriod; itemTime <= endPeriod; itemTime = itemTime.AddMonths(1))
                                            {
                                                var ob = item.MaterialGcs.LastOrDefault();
                                                if (ob != null)
                                                {
                                                    var o = ob.MaterialCosts.Where(m => m.Price != null && m.Period.Value.Month == itemTime.Month
                                                    && m.Period.Value.Year == itemTime.Year).Select(m => m.Price).FirstOrDefault();
                                                    if (o != null)
                                                        sum = sum + (decimal)o;
                                                }
                                            }
                                            <span>@sum.ToString("N2")</span>
                                        }
                                    </td>

                                    @for (var item2 = startPeriod; item2 <= endPeriod; item2 = item2.AddMonths(1))
                                    {
                                        <td class="text-end">
                                            @{
                                                var resultPlan = cost != null && cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultPlan?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var resultFact = cost != null && cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultFact?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var deviation = resultPlan - resultFact;
                                                deviationTotal += deviation is not null ? (decimal)deviation : 0M;
                                            }
                                            @deviation?.ToString("N2")
                                        </td>
                                    }

                                    <td class="text-end">
                                        @deviationTotal.ToString("N2")
                                    </td>
                                </tr>
                            }

                            @foreach (var item in Model.Where(m =>
                            m.IsAgreementContract == false && m.IsOneOfMultiple == false && m.IsSubContract == true))
                            {
                                var contract = item;
                                var list = item.MaterialGcs.LastOrDefault();
                                var cost = list != null ? list.MaterialCosts : null;
                                var deviationTotal = 0M;
                                <tr class="SubContract">
                                    <td>
                                        @contract.Number <br>
                                        от<br>
                                        @contract.Date.Value.ToString("dd-MMMM-yyyy")
                                    </td>
                                    <td>
                                        @contract.NameObject
                                    </td>
                                    <td>
                                        @{
                                            var sum = 0M;
                                            for (var itemTime = startPeriod; itemTime <= endPeriod; itemTime = itemTime.AddMonths(1))
                                            {
                                                var ob = item.MaterialGcs.LastOrDefault();
                                                if (ob != null)
                                                {
                                                    var o = ob.MaterialCosts.Where(m => m.Price != null && m.Period.Value.Month == itemTime.Month
                                                    && m.Period.Value.Year == itemTime.Year).Select(m => m.Price).FirstOrDefault();
                                                    if (o != null)
                                                        sum = sum + (decimal)o;
                                                }
                                            }
                                            <span>@sum.ToString("N2")</span>
                                        }
                                    </td>

                                    @for (var item2 = startPeriod; item2 <= endPeriod; item2 = item2.AddMonths(1))
                                    {
                                        <td class="text-end">
                                            @{
                                                var resultPlan = cost != null && cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultPlan?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var resultFact = cost != null && cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultFact?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var deviation = resultPlan - resultFact;
                                                deviationTotal += deviation is not null ? (decimal)deviation : 0M;
                                            }
                                            @deviation?.ToString("N2")
                                        </td>
                                    }

                                    <td class="text-end">
                                        @deviationTotal.ToString("N2")
                                    </td>
                                </tr>
                            }

                            @foreach (var item in Model.Where(m =>
                            m.IsAgreementContract == false && m.IsOneOfMultiple == true && m.IsSubContract == false))
                            {
                                var contract = item;
                                var list = item.MaterialGcs.LastOrDefault();
                                var cost = list != null ? list.MaterialCosts : null;
                                var deviationTotal = 0M;
                                <tr class="Multiple">
                                    <td>
                                        @contract.Number <br>
                                        от<br>
                                        @contract.Date.Value.ToString("dd-MMMM-yyyy")
                                    </td>
                                    <td>
                                        @contract.NameObject
                                    </td>
                                    <td>
                                        @{
                                            var sum = 0M;
                                            for (var itemTime = startPeriod; itemTime <= endPeriod; itemTime = itemTime.AddMonths(1))
                                            {
                                                var ob = item.MaterialGcs.LastOrDefault();
                                                if (ob != null)
                                                {
                                                    var o = ob.MaterialCosts.Where(m => m.Price != null && m.Period.Value.Month == itemTime.Month
                                                    && m.Period.Value.Year == itemTime.Year).Select(m => m.Price).FirstOrDefault();
                                                    if (o != null)
                                                        sum = sum + (decimal)o;
                                                }
                                            }
                                            <span>@sum.ToString("N2")</span>
                                        }
                                    </td>

                                    @for (var item2 = startPeriod; item2 <= endPeriod; item2 = item2.AddMonths(1))
                                    {
                                        <td class="text-end">
                                            @{
                                                var resultPlan = cost != null && cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact != true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultPlan?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var resultFact = cost != null && cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2) != null ?
                                                cost.FirstOrDefault(x => x.IsFact == true && x.Period?.Date == item2).Price : null;
                                            }
                                            @resultFact?.ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            @{
                                                var deviation = resultPlan - resultFact;
                                                deviationTotal += deviation is not null ? (decimal)deviation : 0M;
                                            }
                                            @deviation?.ToString("N2")
                                        </td>
                                    }

                                    <td class="text-end">
                                        @deviationTotal.ToString("N2")
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>