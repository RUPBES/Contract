@model MvcLayer.Models.AmendmentViewModel
@inject BusinessLayer.Interfaces.ContractInterfaces.IContractService Contract
@{
    ViewData["Title"] = "Добавление доп. соглашения к договору";
    var contid = ViewData["contractId"];
    int backId = 0;
    if ((int)ViewData["returnContractId"] == 0)
        backId = (int)ViewData["contractId"];
    else backId = (int)ViewData["returnContractId"];
    var contract = contid is not null && (int)contid > 0 ? Contract.GetById((int)contid) : null;
}

<div class="dm-overlay">
    <div class="dm-table">
        <div class="dm-cell">
            <div class="dm-modal" style="max-width:960px;">
                <div class="top-modal-block">
                    <label class="my-modal-title">@ViewData["Title"] @contract?.Number</label>
                    @if (backId != null && backId > 0)
                    {
                        <a asp-controller="Contracts" asp-action="Details" asp-route-id="@backId" class="close-btn"></a>
                    }
                    @if (backId == null || backId == 0)
                    {
                        <a asp-controller="Contracts" asp-action="" class="close-btn"></a>
                    }
                </div>
                <hr class="modal-line" />
                <form asp-action="Create" class="row" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input name="Type" value="@Model.Type" hidden>
                    <input name="ContractId" value="@contid" hidden>
                    <input name="returnContractId" value="@ViewBag.returnContractId" hidden>
                    <input name="isScope" value="@ViewBag.isScope" hidden>
                    <input name="isPrepament" value="@ViewBag.isPrepament" hidden>
                    <div class="col-3">
                        <label asp-for="Number" for="NumId"></label>
                        <div class="input-group">
                            <div class="input-group-text">№</div>
                            <input asp-for="Number" class="form-control" id="NumId">
                        </div>
                    </div>
                    <div class="form-group col-3">
                        <label asp-for="Date" class="control-label"></label>
                        <input asp-for="Date" class="form-control" value="@Model.Date?.ToString("yyyy-MM-dd")" type="text" id="Date" required />
                        <span asp-validation-for="Date" class="text-danger"></span>
                    </div>
                    <div class="form-group col-6">
                        <label asp-for="ContractPrice" class="control-label" for="contr"></label>
                        <div class="input-group">
                            <div class="input-group-text"><img src="~/icons/cash-coin.svg" /></div>
                            <input name="ContractPrice" type="text" class="form-control cost" value="@contract?.ContractPrice" id="contr" />
                        </div>
                    </div>

                    <div class="form-group col-6">
                        <label asp-for="Reason" class="control-label"></label>
                        <textarea asp-for="Reason" class="form-control"></textarea>
                        <span asp-validation-for="Reason" class="text-danger"></span>
                    </div>
                    <div class="form-group col-6">
                        <label asp-for="ContractChanges" class="control-label"></label>
                        <textarea asp-for="ContractChanges" class="form-control"></textarea>
                        <span asp-validation-for="ContractChanges" class="text-danger"></span>
                    </div>
                    <div class="form-group col-6">
                        <label asp-for="DateBeginWork" class="control-label"></label>
                        <input asp-for="DateBeginWork" value="@Model.DateBeginWork?.ToString("yyyy-MM-dd")" class="form-control" type="text" id="DateBeginWork" required />
                        <span asp-validation-for="DateBeginWork" class="text-danger"></span>
                    </div>
                    <div class="form-group col-6">
                        <label asp-for="DateEndWork" class="control-label"></label>
                        <input asp-for="DateEndWork" value="@Model.DateEndWork?.ToString("yyyy-MM-dd")" class="form-control" type="text" id="DateEndWork" required />
                        <span asp-validation-for="DateEndWork" class="text-danger"></span>
                    </div>
                    <div class="form-group col-6">
                        <label asp-for="DateEntryObject" class="control-label"></label>
                        <input asp-for="DateEntryObject" value="@Model.DateEntryObject?.ToString("yyyy-MM-dd")" class="form-control" type="text" id="DateEntryObject" required />
                        <span asp-validation-for="DateEntryObject" class="text-danger"></span>
                    </div>
                    <div class="form-group col-6">
                        <label asp-for="FilesEntity" class="control-label"></label>
                        <input name="FilesEntity" type="file" class="form-control" />
                    </div>
                    <div class="form-group btn_position">
                        <input type="submit" value="Сохранить" class="btn btn-primary col-3 mt-3" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(function ($) {
            var allCost = $(".cost")
            for (let el of allCost) {
                digits_float(el)
            }
            $('body').on('input', '.cost', function (e) {
                digits_float(this);
            });
        });
        $("#Date").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        });
        $("#DateBeginWork").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeDateBegin()
        });
        $("#DateEndWork").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeDateEnd()
        });
        $("#DateEntryObject").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeDateEnter()
        });
        let date = document.querySelector("#Date");
        let dateBeg = document.querySelector("#DateBeginWork");
        let dateEnd = document.querySelector("#DateEndWork");
        let dateEnter = document.querySelector("#DateEntryObject");

        let dateVal = date.value;
        let dateBegVal = dateBeg.value;
        let dateEndVal = dateEnd.value;
        let dateEnterVal = dateEnter.value;

        $("#Date").datepicker('setDate', new Date(dateVal));
        $("#DateBeginWork").datepicker('setDate', new Date(dateBegVal));
        $("#DateEndWork").datepicker('setDate', new Date(dateEndVal));
        $("#DateEntryObject").datepicker('setDate', new Date(dateEnterVal));

        function changeDateBegin() {            
            let dateB = $("#DateBeginWork").datepicker('getDate');
            let dateE = $("#DateEndWork").datepicker('getDate');
            let dateEnt = $("#DateEntryObject").datepicker('getDate');

            if (dateB != null) {
                let datePlusOne = addDays(new Date(dateB.toDateString('d-MM-yyyy')), 1);
                let datePlusTwo = addDays(new Date(dateB.toDateString('d-MM-yyyy')), 2);

                if (dateE != null && dateB >= dateE) { $("#DateEndWork").datepicker('update', datePlusOne); }
                if (dateEnt != null && dateB >= dateEnt) { $("#DateEntryObject").datepicker('update', datePlusTwo); }
            }            
        }
        function changeDateEnd() {
            let dateB = $("#DateBeginWork").datepicker('getDate');
            let dateE = $("#DateEndWork").datepicker('getDate');
            let dateEnt = $("#DateEntryObject").datepicker('getDate');

            if (dateB != null) {
                let datePlusOne = addDays(new Date(dateE.toDateString('d-MM-yyyy')), 1);
                let dateDecOne = addDays(new Date(dateE.toDateString('d-MM-yyyy')), -1);

                if (dateB != null && dateE <= dateB) { $("#DateBeginWork").datepicker('update', dateDecOne); }
                if (dateEnt != null && dateE >= dateEnt) { $("#DateEntryObject").datepicker('update', datePlusOne); }
            }
        }
        function changeDateEnter() {
            let dateB = $("#DateBeginWork").datepicker('getDate');
            let dateE = $("#DateEndWork").datepicker('getDate');
            let dateEnt = $("#DateEntryObject").datepicker('getDate');

            if (dateB != null) {
                let dateDecOne = addDays(new Date(dateEnt.toDateString('d-MM-yyyy')), -1);
                let dateDecTwo = addDays(new Date(dateEnt.toDateString('d-MM-yyyy')), -2);

                if (dateB != null && dateEnt <= dateB) { $("#DateBeginWork").datepicker('update', datePlusOne); }
                if (dateE != null && dateEnt <= dateE) { $("#DateEndWork").datepicker('update', datePlusTwo); }
            }
        }
        function addDays(date, countDays) {
            let newDateOfyear = date.getFullYear() + ""; // год
            let day = date.getDate() + countDays; // текущий день
            let month = date.getMonth() + 1; //текущий месяц            
            let maxDateToday = new Date(newDateOfyear, month, 0).getDate()
            if (day > maxDateToday) {
                month = month + 1;
                if (month > 12) {
                    newDateOfyear = newDateOfyear + 1;
                    month = 1;
                    day = (day - 31);
                }
                else {
                    day = (day - maxDateToday);
                }
            }
            if (day < 1) {
                month = month - 1;
                if (month < 1) {
                    newDateOfyear = newDateOfyear - 1;
                    month = 12;
                    day = 31 + day;
                }
                else {
                    let maxDate = new Date(newDateOfyear, month, 0).getDate();
                    day = maxDate + day;
                }
            }

            let dayStr = day < 10 ? "0" + String(day) : String(day);
            let monthStr = month < 10 ? "0" + String(month) : String(month);
            return dayStr + '-' + monthStr + '-' + newDateOfyear;
        }

        dateBeg.addEventListener("change", (e) => {
            changeDateBegin();
        });
        dateEnd.addEventListener('change', (e) => {
            changeDateEnd();
        });
        dateEnter.addEventListener('change', (e) => {
            changeDateEnter();
        });
    </script>
}