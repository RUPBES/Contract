@using BusinessLayer.Enums;
@model MvcLayer.Models.ContractViewModel
@inject BusinessLayer.Interfaces.ContractInterfaces.IContractService Contract
@inject BusinessLayer.Interfaces.CommonInterfaces.IConverter Converter

@{
    ViewData["Title"] = "Добавление подобъекта";

    int backId = 0;
    if ((int)ViewData["returnContractId"] == 0)
        backId = ViewBag.MultipleContractId;
    else backId = (int)ViewData["returnContractId"];
    int? idContr = ViewBag.MultipleContractId;
    string? currency = null;
    var contract = Contract?.GetById((int)idContr);
    if (contract is not null)
    {
        currency = contract.Сurrency is null ? "BYN" : contract?.Сurrency;
    }
}

<style>
    div#CurDC_chosen {
        max-width: 85%;
    }

    label {
        font-size: 1.1em;
    }

    .btn_save {
        margin-top: 1rem !important;
        display: flex;
        align-content: center;
        width: 96%;
        justify-content: flex-end;
    }
</style>

<div class="dm-overlay">
    <div class="dm-table">
        <div class="dm-cell">
            <div class="dm-modal" style="max-width:700px;">
                <div class="top-modal-block">
                    <label class="my-modal-title">@ViewData["Title"]</label>
                    @if (backId != 0)
                    {
                        <a asp-controller="Contracts" asp-action="Details" asp-route-id="@backId" class="close-btn"></a>
                    }
                    else
                    {
                        <a asp-action="Index" class="close-btn"></a>
                    }
                </div>
                <hr class="modal-line" />
                <form class="row align-content-start" method="post" enctype="multipart/form-data">
                    <input asp-for="Id" value="null" hidden />
                    <input asp-for="MultipleContractId" value="@ViewBag.MultipleContractId" hidden>
                    <div class="row">
                        <div class="form-group col-9">
                            <label asp-for="ContractPrice" for="CDC"></label>
                            <div class="input-group">
                                <div class="input-group-text"><img src="~/icons/cash-coin.svg" /></div>
                                <input name="ContractPrice" type="text" class="form-control" id="CDC">
                            </div>
                        </div>
                        <div class="col-3">
                            <label asp-for="Сurrency"></label>
                            <input asp-for="Сurrency" type="text" value="@currency" readonly class="form-control">
                        </div>
                       
                        <div class="col-6">
                            <fieldset class="border rounded-1 p-3 mt-4">
                                <legend class="float-none w-auto px-3">Условия авансирования</legend>
                                @{
                                    int numberCheckbox = 0;
                                }
                                @foreach (var item in Enum.GetValues<PrepaymentConditionEnum>())
                                {
                                    var value = $"{Converter.GetTypeOfPrepaymentCondition((int)item)}";
                                    var valueArray = Model?.PaymentCA?.Where(element => element == value)?.FirstOrDefault();
                                    string idCh = "check" + @numberCheckbox;
                                    <div>
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend input-prepayment-container">
                                                <div class="prepayment_container" style="display:flex">
                                                    <div class="input-group-text" style="display: block;">
                                                        @if (valueArray is not null)
                                                        {
                                                            <input type="checkbox" name="PaymentCA" id="@idCh" value="@value" checked>
                                                        }
                                                        @if (valueArray is null)
                                                        {
                                                            <input type="checkbox" name="PaymentCA" id="@idCh" value="@value">
                                                        }
                                                    </div>
                                                    <input type="text" class="form-control" value="@value" disabled>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    numberCheckbox++;
                                }
                            </fieldset>
                        </div>
                        <div class="col-6">
                            <div class="form-group mt-1">
                                <label class="control-label" asp-for="DateBeginWork"></label>
                                <input asp-for="DateBeginWork" value="@contract.DateBeginWork?.ToString("d-MM-yyyy")" type="text" class="form-control" required id="DateBeginWork">
                                <label class="form-label" id="labelBeginWork" style="display:none">Минимальная дата: @contract.DateBeginWork?.ToString("d MMMM yyyy")</label>
                                <label class="form-label" id="labelBeginWorkMax" style="display:none">Максимальная дата: @contract.EnteringTerm?.ToString("d MMMM yyyy")</label>
                            </div>
                            <div class="form-group mt-1">
                                <label class="control-label" asp-for="DateEndWork"></label>
                                <input asp-for="DateEndWork" value="@contract.DateEndWork?.ToString("d-MM-yyyy")" type="text" class="form-control" required id="DateEndWork">
                                <label class="form-label" id="labelEndWork" style="display:none">Минимальная дата: @contract.DateBeginWork?.ToString("d MMMM yyyy")</label>
                                <label class="form-label" id="labelEndWorkMax" style="display:none">Максимальная дата: @contract.EnteringTerm?.ToString("d MMMM yyyy")</label>
                            </div>
                            <div class="form-group mt-1">
                                <label class="control-label" asp-for="EnteringTerm"></label>
                                <input asp-for="EnteringTerm" value="@contract.EnteringTerm?.ToString("d-MM-yyyy")" type="text" class="form-control" required id="EnteringTerm">
                                <label class="form-label" id="labelEnteringTerm" style="display:none">Минимальная дата: @contract.DateBeginWork?.ToString("d MMMM yyyy")</label>
                                <label class="form-label" id="labelEnteringTermMax" style="display:none">Максимальная дата: @contract.EnteringTerm?.ToString("d MMMM yyyy")</label>
                            </div>
                        </div>
                       
                        <div class="col-12 mt-2">
                            <label class="control-label">Наименование объекта</label>
                            <textarea asp-for="NameObject" required class="form-control" rows="3"></textarea>
                        </div>
                    </div>
                    <div class="col-8 mt-3 btn_save">
                        <button type="submit" class="btn btn-primary" id="subBtn">Сохранить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">

        $(function ($) {
            $('body').on('input', '#CDC', function (e) {
                digits_float(this);
            });
            digits_float('#CDC');
        });
        //////////////////////////////////////////
        ////    проверка вводимых дат ////
        //beginWork(b) - Дата начало работы
        //endWork(c) - Дата окончания работы
        //enteringTm(d) - Дата ввода объекта
        // b < c <= d
        //////********/
        let minDate = $('#DateBeginWork').val();
        let endDate = $('#DateEndWork').val();
        let maxDate = $('#EnteringTerm').val();
        let beginWork = document.querySelector("#DateBeginWork");
        let endWork = document.querySelector("#DateEndWork");
        let enteringTm = document.querySelector("#EnteringTerm");
        $("#DateBeginWork").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            startDate: minDate,
            endDate: maxDate,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeBeginWork()
        });
        $("#DateEndWork").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            startDate: minDate,
            endDate: maxDate,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeEndWork()
        });
        $("#EnteringTerm").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            startDate: minDate,
            endDate: maxDate,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeEnteringTm()
        });

        $("#DateBeginWork").datepicker('setDate', minDate);
        $("#DateEndWork").datepicker('setDate', endDate);
        $("#EnteringTerm").datepicker('setDate', maxDate);

        function changeBeginWork() { 
            let dateBeg = $("#DateBeginWork").datepicker('getDate');
            let dateEnd = $("#DateEndWork").datepicker('getDate');
            let dateEnter = $("#EnteringTerm").datepicker('getDate');

            if (dateBeg != null) {
                let datePlusOne = addDays(new Date(dateBeg.toDateString('d-MM-yyyy')), 1);
                if (dateBeg && (!dateEnd || dateBeg >= dateEnd)) { $("#DateEndWork").datepicker('update', datePlusOne); }
                if (dateBeg && (!dateEnter || dateBeg >= dateEnter)) { $("#EnteringTerm").datepicker('update', datePlusOne); }
            }
            showHideMin()
        }
        function changeEndWork() {
            let dateBeg = $("#DateBeginWork").datepicker('getDate');
            let dateEnd = $("#DateEndWork").datepicker('getDate');
            let dateEnter = $("#EnteringTerm").datepicker('getDate');

            if (dateEnter != null) {
                let dateDecOne = addDays(new Date(dateEnd.toDateString('d-MM-yyyy')), -1);

                if (dateEnd && (!dateBeg || dateEnd <= dateBeg)) { $("#DateBeginWork").datepicker('update', dateDecOne); }
                if (dateEnd && (!dateEnter || dateEnd > dateEnter)) { $("#EnteringTerm").datepicker('update', dateEnd); }
            }
            showHideMin()
        }
        function changeEnteringTm() {
            let dateBeg = $("#DateBeginWork").datepicker('getDate');
            let dateEnd = $("#DateEndWork").datepicker('getDate');
            let dateEnter = $("#EnteringTerm").datepicker('getDate');

            if (dateEnter != null) {
                let dateDecOne = addDays(new Date(dateEnter.toDateString('d-MM-yyyy')), -1);

                if (dateEnter && (!dateBeg || dateEnter <= dateBeg)) { $("#DateBeginWork").datepicker('update', dateDecOne); }
                if (dateEnter && (!dateEnd || dateEnter < dateEnd)) { $("#DateEndWork").datepicker('update', dateEnter); }
            }
            showHideMin()
        }
        function showHideMin() {
            if (!beginWork.value || beginWork.value === null || beginWork.value === '') {
                $('#labelBeginWork').show();
                $('#labelBeginWorkMax').show();
            }
            else {
                $('#labelBeginWork').hide();
                $('#labelBeginWorkMax').hide();
            }

            if (!endWork.value || endWork.value === null || endWork.value === '') {
                $('#labelEndWork').show();
                $('#labelEndWorkMax').show();
            }
            else {
                $('#labelEndWork').hide();
                $('#labelEndWorkMax').hide();
            }

            if (!enteringTm.value || enteringTm.value === null || enteringTm.value === '') {
                $('#labelEnteringTerm').show();
                $('#labelEnteringTermMax').show();
            }
            else {
                $('#labelEnteringTerm').hide();
                $('#labelEnteringTermMax').hide();
            }
        }

        beginWork.addEventListener('change', (e) => {
            changeBeginWork();
        });
        endWork.addEventListener('change', (e) => {
            changeEndWork();
        });
        enteringTm.addEventListener('change', (e) => {
            changeEnteringTm();
        });
        function addDays(date, countDays) {
            let newDateOfyear = date.getFullYear() + ""; // год
            let day = date.getDate() + countDays; // текущий день
            let month = date.getMonth() + 1; //текущий месяц

            let maxDateToday = new Date(newDateOfyear, month, 0).getDate()
            if (day > maxDateToday) {
                month = month + 1;
                if (month > 12) {
                    newDateOfyear = newDateOfyear + 1;
                    month = 1;
                    day = (day - 31);
                }
                else {
                    day = (day - maxDateToday);
                }
            }
            if (day < 1) {
                month = month - 1;
                if (month < 1) {
                    newDateOfyear = newDateOfyear - 1;
                    month = 12;
                    day = 31 + day;
                }
                else {
                    let maxDate = new Date(newDateOfyear, month, 0).getDate();
                    day = maxDate + day;
                }
            }

            let dayStr = day < 10 ? "0" + String(day) : String(day);
            let monthStr = month < 10 ? "0" + String(month) : String(month);
            return dayStr + '-' + monthStr + '-' + newDateOfyear;
        }

        ///////проверка на взаимоисключающие позиции условий авансирования, если выбрано "Без авансов" - остальные замьюченные, и наоборот/////

        let ch1 = document.querySelector("#check0");
        let ch2 = document.querySelector("#check1");
        let ch3 = document.querySelector("#check2");

        ch1.addEventListener('change', (e) => {
            if (e.currentTarget.checked) {
                ch2.setAttribute("disabled", true);
                ch3.setAttribute("disabled", true);
            }

            if (!e.currentTarget.checked) {
                ch2.removeAttribute("disabled");
                ch3.removeAttribute("disabled");
            }
        });
        ch2.addEventListener('change', (e) => {
            if (e.currentTarget.checked) {
                ch1.setAttribute("disabled", true);
            }
            if (!e.currentTarget.checked && !ch3.checked) {
                ch1.removeAttribute("disabled");
            }

        });
        ch3.addEventListener('change', (e) => {
            if (e.currentTarget.checked) {
                ch1.setAttribute("disabled", true);
            }
            if (!e.currentTarget.checked && !ch2.checked) {
                ch1.removeAttribute("disabled");
            }
        });

        ///////
    </script>
}