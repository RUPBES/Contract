@using BusinessLayer.Enums;
@model MvcLayer.Models.ContractViewModel
@inject BusinessLayer.Interfaces.ContractInterfaces.IOrganizationService Organization
@inject BusinessLayer.Interfaces.ContractInterfaces.IEmployeeService Employee
@inject BusinessLayer.Interfaces.ContractInterfaces.ITypeWorkService TypeWork
@inject BusinessLayer.Interfaces.CommonInterfaces.IConverter Converter
@inject BusinessLayer.Interfaces.ContractInterfaces.IContractService Contract

@{
    ViewData["Title"] = "Редактирование";
    var d = Model;
    int backId = 0;
    if ((int)ViewData["returnContractId"] == 0)
        backId = Model.Id;
    else backId = (int)ViewData["returnContractId"];
    var contract = @Contract?.GetById((int)(int)ViewData["returnContractId"]);
}
<style>
    .dm-modal {
        background-color: lightsteelblue;
    }

    .close-btn {
        color: red
    }

        .close-btn::after {
            border: 2px solid #F00 !important;
        }

        .close-btn:hover::after {
            border-color: red !important;
            color: red !important;
            -webkit-transform: scale(1);
            -moz-transform: scale(1);
            -ms-transform: scale(1);
            transform: scale(1);
            font-weight: bold;
        }
</style>
<div class="dm-overlay">
    <div class="dm-table">
        <div class="dm-cell">
            <div class="dm-modal">
                <div class="top-modal-block">
                    <label class="my-modal-title">@ViewData["Title"]</label>
                    @if ((int)ViewData["returnContractId"] != 0)
                    {
                        <a asp-controller="Contracts" asp-action="Details" asp-route-id="@backId" class="close-btn"></a>
                    }
                    else if (ViewBag.IsEngin != null)
                    {
                        <a asp-action="Engineerings" class="close-btn"></a>
                    }
                    else
                    {
                        <a asp-action="Index" class="close-btn"></a>
                    }
                </div>
                <hr class="modal-line" />
                <form asp-action="EditSubObj" asp-controller="Contracts" asp-route-returnContractId="@ViewBag.returnContractId" class="row" style="max-width:700px;">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="IsOneOfMultiple" />
                    <input type="hidden" asp-for="MultipleContractId" />   
                    <div class="col-4">
                        <label asp-for="DateBeginWork" class="control-label"></label>
                        <input type="date" asp-for="DateBeginWork" class="form-control" id="DateBeginWork" min="@contract.DateBeginWork?.ToString("yyyy-MM-dd")" max="@contract.DateEndWork?.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="DateBeginWork" class="text-danger"></span>
                    </div>
                    <div class="col-4">
                        <label asp-for="DateEndWork" class="control-label"></label>
                        <input type="date" asp-for="DateEndWork" class="form-control" id="DateEndWork" min="@contract.DateBeginWork?.ToString("yyyy-MM-dd")" max="@contract.DateEndWork?.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="DateEndWork" class="text-danger"></span>
                    </div>
                    <div class="col-4">
                        <label asp-for="EnteringTerm" class="control-label"></label>
                        <input type="date" asp-for="EnteringTerm" class="form-control" id="EnteringTerm" min="@contract.DateBeginWork?.ToString("yyyy-MM-dd")" max="@contract.EnteringTerm?.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="EnteringTerm" class="text-danger"></span>
                    </div>
                    
                    
                    <div class="col-3">
                        <label asp-for="ContractPrice" class="control-label"></label>
                        <input id="contractPrice" type="text" name="ContractPrice" value="@Model.ContractPrice" class="form-control cost" />
                        <span asp-validation-for="ContractPrice" class="text-danger"></span>
                    </div>
                    <div class="col-3">
                        <label asp-for="Сurrency" class="control-label"></label>
                        <select name="Сurrency" class="form-control js-chosen" id="CurDC">
                            <option value="@Model.Сurrency" selected>@Model.Сurrency</option>
                            @foreach (var item in Enum.GetValues<CurrencyEnum>())
                            {
                                <option value="@item">@item</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label asp-for="NameObject" class="control-label"></label>
                        <input asp-for="NameObject" class="form-control" />
                        <span asp-validation-for="NameObject" class="text-danger"></span>
                    </div>
                                                           
                    <div class="form-group mt-3">
                        <input type="submit" value="Редактировать" class="btn btn-primary" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        <script>
            $(function ($) {
                var allCost = $(".cost")
                for (let el of allCost) {
                    digits_float(el)
                }
                $('body').on('input', '.cost', function (e) {
                    digits_float(this);
                });
            });

            //////////////////////////////////////////
            ////    проверка вводимых дат ////
            //dateContract(a) - Дата контракта
            //beginWork(b) - Дата начало работы
            //endWork(c) - Дата окончания работы
            //enteringTm(d) - Дата ввода объекта
            //contractTm(e) - Дата дествия договора
            //a <= b < c <= d < e
            //////********/
            let beginWork = document.querySelector("#DateBeginWork");
            let endWork = document.querySelector("#DateEndWork");
            let enteringTm = document.querySelector("#EnteringTerm");

            beginWork.addEventListener('change', (e) => {
                let dateBeg = beginWork.value;
                let dateEnd = endWork.value;
                let dateEnter = enteringTm.value;

                let datePlusOne = addDays(new Date(dateBeg), 1);
                if (!dateEnd || dateBeg >= dateEnd) { $("#DateEndWork").val(datePlusOne); }
                if (!dateEnter || dateBeg >= dateEnter) { $("#EnteringTerm").val(datePlusOne); }

                endWork.setAttribute('min', datePlusOne);
                enteringTm.setAttribute('min', datePlusOne);
            });
            endWork.addEventListener('change', (e) => {
                let dateBeg = beginWork.value;
                let dateEnd = endWork.value;
                let dateEnter = enteringTm.value;

                let dateDecOne = addDays(new Date(dateEnd), -1);
                if (!dateBeg || dateEnd <= dateBeg) { $("#DateBeginWork").val(dateDecOne); }
                if (!dateEnter || dateEnd > dateEnter) { $("#EnteringTerm").val(dateEnd); }

                enteringTm.setAttribute('min', dateEnd);
            });
            enteringTm.addEventListener('change', (e) => {
                let dateBeg = beginWork.value;
                let dateEnd = endWork.value;
                let dateEnter = enteringTm.value;

                let dateDecOne = addDays(new Date(dateEnter), -1);
                if (!dateBeg || dateEnter <= dateBeg) { $("#DateBeginWork").val(dateDecOne); }
                if (!dateEnd || dateEnter < dateEnd) { $("#DateEndWork").val(dateEnter); }
            });
            function addDays(date, countDays) {
                let newDateOfyear = date.getFullYear() + "";; // год

                let day = date.getDate() + countDays; // текущий день
                let month = date.getMonth() + 1; //текущий месяц


                let maxDateToday = new Date(newDateOfyear, month, 0).getDate()
                if (day > maxDateToday) {
                    month = month + 1;
                    if (month > 12) {
                        newDateOfyear = newDateOfyear + 1;
                        month = 1;
                        day = (day - 31);
                    }
                    else {
                        day = (day - maxDateToday);
                    }
                }
                if (day < 1) {
                    month = month - 1;
                    if (month < 1) {
                        newDateOfyear = newDateOfyear - 1;
                        month = 12;
                        day = 31 + day;
                    }
                    else {
                        let maxDate = new Date(newDateOfyear, month, 0).getDate();
                        day = maxDate + day;
                    }
                }

                let dayStr = day < 10 ? "0" + String(day) : String(day);
                let monthStr = month < 10 ? "0" + String(month) : String(month);
                return newDateOfyear + '-' + monthStr + '-' + dayStr;
            }
     </script>
    }
}
