@using BusinessLayer.Enums;
@model MvcLayer.Models.ContractViewModel
@inject BusinessLayer.Interfaces.ContractInterfaces.IOrganizationService Organization
@inject BusinessLayer.Interfaces.ContractInterfaces.IEmployeeService Employee
@inject BusinessLayer.Interfaces.ContractInterfaces.ITypeWorkService TypeWork
@inject BusinessLayer.Interfaces.CommonInterfaces.IConverter Converter
@inject BusinessLayer.Interfaces.ContractInterfaces.IContractService Contract

@{
    ViewData["Title"] = "Редактирование";
    var d = Model;
    int backId = 0;
    if ((int)ViewData["returnContractId"] == 0)
        backId = Model.Id;
    else backId = (int)ViewData["returnContractId"];
    var contract = @Contract?.GetById((int)ViewData["returnContractId"]);
}
<style>
    .dm-modal {
        background-color: lightsteelblue;
    }

    .close-btn {
        color: red
    }

        .close-btn::after {
            border: 2px solid #F00 !important;
        }

        .close-btn:hover::after {
            border-color: red !important;
            color: red !important;
            -webkit-transform: scale(1);
            -moz-transform: scale(1);
            -ms-transform: scale(1);
            transform: scale(1);
            font-weight: bold;
        }

    .control-label:before {
        content: "*";
        color: red;
        font-size: 20px;
    }

    label {
        font-size: 1.1em;
    }

    .text_input {
        text-align: right;
    }
</style>
<div class="dm-overlay">
    <div class="dm-table">
        <div class="dm-cell">
            <div class="dm-modal">
                <div class="top-modal-block">
                    <label class="my-modal-title">@ViewData["Title"]</label>
                    @if ((int)ViewData["returnContractId"] != 0)
                    {
                        <a asp-controller="Contracts" asp-action="Details" asp-route-id="@backId" class="close-btn"></a>
                    }
                    else if (ViewBag.IsEngin != null)
                    {
                        <a asp-action="Engineerings" class="close-btn"></a>
                    }
                    else
                    {
                        <a asp-action="Index" class="close-btn"></a>
                    }
                </div>
                <hr class="modal-line" />
                <form asp-action="EditSubObj" asp-controller="Contracts" asp-route-returnContractId="@ViewBag.returnContractId" class="row" style="max-width:700px;">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="IsOneOfMultiple" />
                    <input type="hidden" asp-for="MultipleContractId" />

                    <div class="row">
                        <div class="form-group col-9">
                            <label asp-for="ContractPrice"></label>
                            <input id="contractPrice" type="text" name="ContractPrice" value="@Model.ContractPrice" class="form-control cost" />
                            <span asp-validation-for="ContractPrice" class="text-danger"></span>
                        </div>
                        <div class="col-3">
                            <label asp-for="Сurrency"></label>
                            <select name="Сurrency" class="form-control js-chosen" id="CurDC">
                                <option value="@Model.Сurrency" selected>@Model.Сurrency</option>
                                @foreach (var item in Enum.GetValues<CurrencyEnum>())
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>

                        <div class="col-6">
                            <fieldset class="border rounded-1 p-3 col k-ml-5">
                                <legend class="float-none w-auto px-3">Условия авансирования</legend>
                                @{
                                    int numberCheckbox = 0;
                                }
                                @foreach (var item in Enum.GetValues<PrepaymentConditionEnum>())
                                {
                                    var value = $"{Converter.GetTypeOfPrepaymentCondition((int)item)}";
                                    var valueArray = Model?.PaymentСonditionsAvans;
                                    if (valueArray == null) { valueArray = ""; }
                                    string idCh = "check" + @numberCheckbox;
                                    <div>
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text" style="display: block;">
                                                    @if (valueArray.Contains(value))
                                                    {
                                                        <input type="checkbox" name="PaymentCA" id="@idCh" value="@value" checked>
                                                    }
                                                    else
                                                    {
                                                        <input type="checkbox" name="PaymentCA" id="@idCh" value="@value">
                                                    }
                                                </div>
                                            </div>
                                            <input type="text" class="form-control" value="@value" disabled>

                                        </div>
                                    </div>
                                    numberCheckbox++;
                                }
                            </fieldset>
                        </div>
                        <div class="col-6">
                            <div class="form-group mt-1">
                                <label class="control-label" asp-for="DateBeginWork"></label>
                                <input asp-for="DateBeginWork" value="@Model.DateBeginWork?.ToString("yyyy-MM-dd")" type="text" class="form-control" required id="DateBeginWork">
                                <label class="form-label" id="labelBeginWork" style="display:none"></label>
                            </div>
                            <div class="form-group mt-1">
                                <label class="control-label" asp-for="DateEndWork"></label>
                                <input asp-for="DateEndWork" value="@Model.DateEndWork?.ToString("yyyy-MM-dd")" type="text" class="form-control" required id="DateEndWork">
                                <label class="form-label" id="labelEndWork" style="display:none"></label>
                            </div>
                            <div class="form-group mt-1">
                                <label class="control-label" asp-for="EnteringTerm"></label>
                                <input asp-for="EnteringTerm" value="@Model.EnteringTerm?.ToString("yyyy-MM-dd")" type="text" class="form-control" required id="EnteringTerm">
                                <label class="form-label" id="labelEnteringTerm" style="display:none"></label>
                            </div>
                        </div>
                        <div class="col-12 mt-2">
                            <label asp-for="NameObject" class="control-label"></label>
                            <input asp-for="NameObject" class="form-control" rows="3" required />
                            <span asp-validation-for="NameObject" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="text_input form-group mt-3">
                        <input type="submit" value="Редактировать" class="btn btn-primary" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<input id="BeginMin" value="@contract.DateBeginWork?.ToString("yyyy-MM-dd")" hidden />
<input id="EndMin" value="@contract.DateEndWork?.ToString("yyyy-MM-dd")" hidden />
<input id="EnterMin" value="@contract.EnteringTerm?.ToString("yyyy-MM-dd")" hidden />

@section Scripts {
    <script>
        let minDate = $('#BeginMin').val();
        let endDate = $('#EndMin').val();
        let maxDate = $('#EnterMin').val();

        let beginWork = document.querySelector("#DateBeginWork");
        let endWork = document.querySelector("#DateEndWork");
        let enteringTm = document.querySelector("#EnteringTerm");
        if (!beginWork.value || (beginWork.value === null) || (beginWork.value === '')) {
            $("#DateBeginWork").val(minDate)
        }
        if (!endWork.value || (endWork.value === null) || (endWork.value === '')) {
            $("#DateEndWork").val(endDate)
        }
        if (!enteringTm.value || (enteringTm.value === null) || (enteringTm.value === '')) {
            $("#EnteringTerm").val(maxDate)
        }
        let beginWorkVal = beginWork.value;
        let endWorkVal = endWork.value;
        let enteringTmVal = enteringTm.value;
        $(function ($) {
            var allCost = $(".cost")
            for (let el of allCost) {
                digits_float(el)
            }
            $('body').on('input', '.cost', function (e) {
                digits_float(this);
            });
        });

        $("#DateBeginWork").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            startDate: minDate,
            endDate: maxDate,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeBeginWork()
        });
        $("#DateEndWork").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            startDate: minDate,
            endDate: maxDate,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeEndWork()
        });
        $("#EnteringTerm").datepicker({
            format: "d MM yyyy",
            language: "ru",
            calendarWeeks: true,
            autoclose: true,
            startDate: minDate,
            endDate: maxDate,
            keyboardNavigation: false,
            assumeNearbyYear: true,
            toggleActive: true
        }).on('changeDate', function () {
            changeEnteringTm()
        });

        $("#DateBeginWork").datepicker('setDate', new Date(beginWorkVal));
        $("#DateEndWork").datepicker('setDate', new Date(endWorkVal));
        $("#EnteringTerm").datepicker('setDate', new Date(enteringTmVal));

        function changeBeginWork() {
            let dateBeg = $("#DateBeginWork").datepicker('getDate');
            let dateEnd = $("#DateEndWork").datepicker('getDate');
            let dateEnter = $("#EnteringTerm").datepicker('getDate');

            if (dateBeg != null) {
                let datePlusOne = addDays(new Date(dateBeg.toDateString('d-MM-yyyy')), 1);
                if (dateBeg && (!dateEnd || dateBeg >= dateEnd)) { $("#DateEndWork").datepicker('update', datePlusOne); }
                if (dateBeg && (!dateEnter || dateBeg >= dateEnter)) { $("#EnteringTerm").datepicker('update', datePlusOne); }
            }
            showHideMin()
        }
        function changeEndWork() {
            let dateBeg = $("#DateBeginWork").datepicker('getDate');
            let dateEnd = $("#DateEndWork").datepicker('getDate');
            let dateEnter = $("#EnteringTerm").datepicker('getDate');

            if (dateEnter != null) {
                let dateDecOne = addDays(new Date(dateEnd.toDateString('d-MM-yyyy')), -1);

                if (dateEnd && (!dateBeg || dateEnd <= dateBeg)) { $("#DateBeginWork").datepicker('update', dateDecOne); }
                if (dateEnd && (!dateEnter || dateEnd > dateEnter)) { $("#EnteringTerm").datepicker('update', dateEnd); }
            }
            showHideMin()
        }
        function changeEnteringTm() {
            let dateBeg = $("#DateBeginWork").datepicker('getDate');
            let dateEnd = $("#DateEndWork").datepicker('getDate');
            let dateEnter = $("#EnteringTerm").datepicker('getDate');

            if (dateEnter != null) {
                let dateDecOne = addDays(new Date(dateEnter.toDateString('d-MM-yyyy')), -1);

                if (dateEnter && (!dateBeg || dateEnter <= dateBeg)) { $("#DateBeginWork").datepicker('update', dateDecOne); }
                if (dateEnter && (!dateEnd || dateEnter < dateEnd)) { $("#DateEndWork").datepicker('update', dateEnter); }
            }
            showHideMin()
        }
        function showHideMin() {
            if (!beginWork.value || beginWork.value === null || beginWork.value === '') {
                $('#labelBeginWork').show();
                $('#labelBeginWorkMax').show();
            }
            else {
                $('#labelBeginWork').hide();
                $('#labelBeginWorkMax').hide();
            }

            if (!endWork.value || endWork.value === null || endWork.value === '') {
                $('#labelEndWork').show();
                $('#labelEndWorkMax').show();
            }
            else {
                $('#labelEndWork').hide();
                $('#labelEndWorkMax').hide();
            }

            if (!enteringTm.value || enteringTm.value === null || enteringTm.value === '') {
                $('#labelEnteringTerm').show();
                $('#labelEnteringTermMax').show();
            }
            else {
                $('#labelEnteringTerm').hide();
                $('#labelEnteringTermMax').hide();
            }
        }

        beginWork.addEventListener('change', changeBeginWork);
        endWork.addEventListener('change', changeEndWork);
        enteringTm.addEventListener('change', changeEnteringTm);
        function addDays(date, countDays) {
            let newDateOfyear = date.getFullYear() + ""; // год
            let day = date.getDate() + countDays; // текущий день
            let month = date.getMonth() + 1; //текущий месяц

            let maxDateToday = new Date(newDateOfyear, month, 0).getDate()
            if (day > maxDateToday) {
                month = month + 1;
                if (month > 12) {
                    newDateOfyear = newDateOfyear + 1;
                    month = 1;
                    day = (day - 31);
                }
                else {
                    day = (day - maxDateToday);
                }
            }
            if (day < 1) {
                month = month - 1;
                if (month < 1) {
                    newDateOfyear = newDateOfyear - 1;
                    month = 12;
                    day = 31 + day;
                }
                else {
                    let maxDate = new Date(newDateOfyear, month, 0).getDate();
                    day = maxDate + day;
                }
            }

            let dayStr = day < 10 ? "0" + String(day) : String(day);
            let monthStr = month < 10 ? "0" + String(month) : String(month);
            return dayStr + '-' + monthStr + '-' + newDateOfyear;
        }
    </script>
}
