@using BusinessLayer.Enums;
@model MvcLayer.Models.ContractViewModel
@inject BusinessLayer.Interfaces.ContractInterfaces.IOrganizationService Organization
@inject BusinessLayer.Interfaces.ContractInterfaces.IEmployeeService Employee
@inject BusinessLayer.Interfaces.CommonInterfaces.IConverter Converter
@inject BusinessLayer.Interfaces.ContractInterfaces.ITypeWorkService TypeWork

@{
    string? inputDays = null;
    @if (Model?.PaymentСonditionsDaysRaschet.HasValue == true)
    {
        inputDays = $"<div class='col-1'><input type='number' name='PaymentСonditionsDaysRaschet' class='form-control' value='{@Model?.PaymentСonditionsDaysRaschet.Value}' min='1'></div>";
    }
    @if (Model?.PaymentСonditionsDaysRaschet.HasValue == false || Model?.PaymentСonditionsDaysRaschet is null)
    {
        inputDays = $"<div class='col-1'><input type='number' name='PaymentСonditionsDaysRaschet' class='form-control' placeholder='0' min='1'></div>";
    }
}
<h4>Договор субподряда</h4>
<hr />
<div id="modDialog" class="modal fade">
    <div id="dialogContent" class="modal-dialog modal-dialog-centered" role="document"></div>
</div>
<div id="modDialog2" class="modal fade">
    <div id="dialogContent2" class="modal-dialog modal-dialog-centered" role="document"></div>
</div>
<div id="modDialog3" class="modal fade">
    <div id="dialogContent3" class="modal-dialog modal-dialog-centered" role="document"></div>
</div>

<form class="row align-content-start" asp-action=Create method="post" id="MainForm" enctype="multipart/form-data">
    <input asp-for="IsSubContract" value="true" hidden />
    <input asp-for="SubContractId" hidden />
    <input asp-for="NameObject" hidden>
    <input asp-for="IsEngineering" value="false" hidden />
    <input asp-for="IsAgreementContract" value="false" hidden />

    <div class="col-4">
        <div class="row">
            <div class="col-12">
                <label asp-for="Number" for="NumDC"></label>
                <div class="input-group">
                    <div class="input-group-text">№</div>
                    <input asp-for="Number" class="form-control" id="NumDC">
                    <button class="btn btn-warning" type="button" id="searchButton"><img src="/icons/search.svg" title="Проверить, существует ли договор с таким номером"></button>
                </div>
            </div>
            <div class="col-12">
                <label asp-for="Date" for="DateDC"></label>
                <div class="input-group">
                    <div class="input-group-text"><img src="~/icons/calendar-date.svg" /></div>
                    <input asp-for="Date" type="date" class="form-control" id="DateDC">
                </div>
            </div>
            @*Орагнизации *********@
            <div class="col-12 mt-3">
                <fieldset class="border rounded-3 p-3">
                    <legend class="float-none w-auto px-3">
                        <a asp-action="AddOrganization" id="addOrganization" class="btn btn-sm btn-success">
                            <img src="~/icons/house-add.svg" />
                            Добавить новую организацию
                        </a>
                    </legend>
                    <div class="col-12">
                        <label>Субподрядчик</label>
                        <input name="ContractOrganizations[0].Organization" hidden />
                        <select name="ContractOrganizations[0].OrganizationId" class="form-control js-chosen slt-add-organization">
                            @if (Model?.ContractOrganizations[0] is not null)
                            {
                                var item = Organization.GetById((int)Model?.ContractOrganizations[0].OrganizationId);
                                <option selected value="@item?.Id">@item?.Name</option>
                            }
                            @if (Model?.ContractOrganizations[0] is null)
                            {
                                <option selected>Выберите организацию</option>
                            }

                            @foreach (var item in Organization.GetAll())
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>
                    </div>

                    <input name="ContractOrganizations[1].Organization" hidden />
                    <input name="ContractOrganizations[2].Organization" hidden />
                </fieldset>
            </div>

            @*Сотрудники *********@
            <div class="col-12 mt-3">
                <fieldset class="border rounded-3 p-3">
                    <legend class="float-none w-auto px-3">
                        <a asp-action="AddEmployee" id="addEmployee" class="btn btn-sm btn-success">
                            <img src="~/icons/person-plus.svg" />
                            Добавить нового сотрудника
                        </a>
                    </legend>
                    <div class="col-12">
                        <label>Подписант договора</label>
                        @* <input name="EmployeeContracts[0].Employee" hidden /> *@
                        <input name="EmployeeContracts[0].IsSignatory" type="checkbox" value="true" checked selected hidden>
                        <select name="EmployeeContracts[0].EmployeeId" class="form-control js-chosen" id="selectEmpOne">
                            @if (Model?.EmployeeContracts[0] is not null)
                            {
                                var item = Employee.GetById(Model.EmployeeContracts[0].EmployeeId);
                                <option selected value="@item?.Id">@item?.FullName</option>
                            }
                            @if (Model?.EmployeeContracts[0] is null)
                            {
                                <option selected>Выберите сотрудника</option>
                            }

                            @foreach (var item in Employee.GetAll())
                            {
                                <option value="@item.Id">@item.FullName</option>
                            }
                        </select>
                    </div>
                    <div class="col-12">
                        <label>Ответственный за ведение договора</label>
                        @* <input name="EmployeeContracts[1].Employee" hidden /> *@
                        <input name="EmployeeContracts[1].IsResponsible" type="checkbox" value="true" checked selected hidden>
                        <select name="EmployeeContracts[1].EmployeeId" class="form-control js-chosen" id="selectEmpTwo">
                            @if (Model?.EmployeeContracts[1] is not null)
                            {
                                var item = Employee.GetById(Model.EmployeeContracts[1].EmployeeId);
                                <option selected value="@item?.Id">@item?.FullName</option>
                            }
                            @if (Model?.EmployeeContracts[1] is null)
                            {
                                <option selected>Выберите сотрудника</option>
                            }
                            @foreach (var item in Employee.GetAll())
                            {
                                <option value="@item.Id">@item.FullName</option>
                            }
                        </select>
                    </div>
                    <input name="EmployeeContracts[2].Employee" hidden />
                </fieldset>
            </div>

            @*Виды работ*********@
            <div class="col-12 mt-3">
                <fieldset class="border rounded-3 p-3">
                    <legend class="float-none w-auto px-3">
                        <a asp-action="AddTypeWork" id="addTypeWork" class="btn btn-sm btn-success">
                            <img src="~/icons/house-add.svg" />
                            Добавить новый вид работ
                        </a>
                    </legend>
                    <div class="col-12">
                        <label>Вид работ</label>
                        <input name="TypeWorkContracts[0].TypeWork" hidden />
                        <select name="TypeWorkContracts[0].TypeWorkId" class="form-control js-chosen slt-add-organization">
                            @if (Model?.TypeWorkContracts[0] is not null)
                            {
                                var item = TypeWork.GetById((int)Model?.TypeWorkContracts[0].TypeWorkId);
                                <option selected value="@item?.Id">@item?.Name</option>
                            }
                            @if (Model?.TypeWorkContracts[0] is null)
                            {
                                <option selected>Выберите вид работ</option>
                            }

                            @foreach (var item in TypeWork.GetAll())
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>
                    </div>
                </fieldset>

                <input name="TypeWorkContracts[1].TypeWork" hidden />
            </div>
        </div>
    </div>
    <div class="col-4">
        <div class="form-group">
            <label asp-for="ContractPrice" for="CDC"></label>
            <div class="input-group">
                <div class="input-group-text"><img src="~/icons/cash-coin.svg" /></div>
                <input name="ContractPrice" type="text" class="form-control" id="CDC">
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Сurrency" for="CurDC"></label>
            <div class="input-group">
                <div class="input-group-text"><img src="~/icons/currency-exchange.svg" /></div>
                <select name="Сurrency" class="form-control js-chosen" id="CurDC">
                    @if (Model?.Сurrency is null)
                    {
                        <option selected disabled>Выбрать валюту</option>
                    }
                    @if (Model?.Сurrency is not null)
                    {
                        <option selected value="@Model?.Сurrency">@Model?.Сurrency</option>
                    }
                    @foreach (var item in Enum.GetValues<CurrencyEnum>())
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-12 mt-2">
            <label>Наименование объекта</label>
            <textarea asp-for="NameObject" class="form-control" rows="2" disabled></textarea>
        </div>
        <fieldset class="border rounded-3 p-3 mt-2">
            <legend class="float-none w-auto px-3">Источник финансирования</legend>
            @foreach (var item in Enum.GetValues<FundingSourceEnum>())
            {
                var value = $"{Converter.GetTypeOfFundingSource((int)item)}";
                var valueArray = Model?.FundingFS?.Where(element => element == value)?.FirstOrDefault();

                <div>
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <div class="input-group-text" style="display: block;">
                                @if (valueArray is not null)
                                {
                                    <input type="checkbox" name="FundingFS" value="@value" checked>
                                }
                                @if (valueArray is null)
                                {
                                    <input type="checkbox" name="FundingFS" value="@value">
                                }
                            </div>
                        </div>
                        <input type="text" class="form-control" value="@value" disabled>
                    </div>
                </div>
            }
        </fieldset>
        <fieldset class="border rounded-3 p-3">
            <legend class="float-none w-auto px-3">Условия авансирования</legend>
            @{
                int numberCheckbox = 0;
            }
            @foreach (var item in Enum.GetValues<PrepaymentConditionEnum>())
            {
                var value = $"{Converter.GetTypeOfPrepaymentCondition((int)item)}";
                var valueArray = Model?.PaymentCA?.Where(element => element == value)?.FirstOrDefault();
                string idCh = "check" + @numberCheckbox;

                <div>
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <div class="input-group-text" style="display: block;">
                                @if (valueArray is not null)
                                {
                                    <input type="checkbox" name="PaymentCA" id="@idCh" value="@value" checked>
                                }
                                @if (valueArray is null)
                                {
                                    <input type="checkbox" name="PaymentCA" id="@idCh" value="@value">
                                }
                            </div>
                        </div>
                        <input type="text" class="form-control" value="@value" disabled>

                    </div>
                </div>
                numberCheckbox++;
            }
        </fieldset>
    </div>
    <div class="col-4">
        <fieldset class="border rounded-3 p-3">
            <legend class="float-none w-auto px-3">Сроки</legend>
            <label asp-for="DateBeginWork">Начало работ</label>
            <input asp-for="DateBeginWork" type="date" class="form-control">

            <label asp-for="DateEndWork">Окончание работ</label>
            <input asp-for="DateEndWork" type="date" class="form-control">

            <label asp-for="EnteringTerm"></label>
            <input asp-for="EnteringTerm" type="date" class="form-control">

            <label asp-for="ContractTerm"></label>
            <input asp-for="ContractTerm" type="date" class="form-control">
        </fieldset>
        <fieldset class="border rounded-3 p-3">
            <legend class="float-none w-auto px-3">Процедура выбора</legend>
            @foreach (var item in Enum.GetValues<ProcedureTypeEnum>())
            {
                var name = $"{Converter.GetTypeOfProcedure((int)item)}";
                int numberEnum = (int)item;
                <div>
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <div class="input-group-text" style="display: block;">
                                @if (@Model?.SelectionProcedures?[0].TypeProcedure is not null && (bool)@Model?.SelectionProcedures[0].TypeProcedure?.Equals(name, StringComparison.OrdinalIgnoreCase) == true)
                                {
                                    <input type="radio" name="SelectionProcedures[0].TypeProcedure" value="@name" checked>
                                }

                                @if ((@Model?.SelectionProcedures?[0].TypeProcedure is null || (bool)@Model?.SelectionProcedures[0].TypeProcedure?.Equals(name, StringComparison.OrdinalIgnoreCase) == false) && numberEnum == 0)
                                {
                                    <input type="radio" name="SelectionProcedures[0].TypeProcedure" value="@name" checked>
                                }


                                @if ((@Model?.SelectionProcedures?[0].TypeProcedure is null || (bool)@Model?.SelectionProcedures[0].TypeProcedure?.Equals(name, StringComparison.OrdinalIgnoreCase) == false) && numberEnum != 0)
                                {
                                    <input type="radio" name="SelectionProcedures[0].TypeProcedure" value="@name">
                                }

                            </div>
                        </div>
                        <input type="text" class="form-control" value="@name" disabled>
                    </div>
                </div>
            }
        </fieldset>
    </div>
    <div class="col-8 mt-1">
        <fieldset class="border rounded-3 p-3">
            <legend class="float-none w-auto px-3">Расчет за выполненные работы</legend>
            @foreach (var item in Enum.GetValues<PaymentForWorkPerformed>())
            {
                var name = $"{Converter.GetTypeOfPaymentForWork((int)item)}";
                bool? isValueValid = Model?.PaymentСonditionsRaschet?.Equals(name, StringComparison.OrdinalIgnoreCase);
                bool isDayValid = Model?.PaymentСonditionsDaysRaschet is null || isValueValid is null || isValueValid == false ? false : true;

                <div>
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <div class="input-group-text" style="display: block;">
                                @if (@Model?.PaymentСonditionsRaschet is not null && isValueValid == true)
                                {
                                    <input class="checkChoise" type="radio" name="PaymentСonditionsRaschet" value="@name" checked>
                                }
                                @if (@Model?.PaymentСonditionsRaschet is null || isValueValid == false)
                                {
                                    <input class="checkChoise" type="radio" name="PaymentСonditionsRaschet" value="@name">
                                }

                            </div>
                        </div>
                        @if (Model?.PaymentСonditionsDaysRaschet.HasValue == true && @Model?.PaymentСonditionsRaschet is not null && isValueValid == true)
                        {
                            <div class="col-1" id="inpValueRaschet"><input type="number" name="PaymentСonditionsDaysRaschet" class="form-control" value="@Model?.PaymentСonditionsDaysRaschet.Value" min="1"></div>
                        }
                        <div class="col-9">
                            <input type="text" class="form-control" value="@name" disabled>
                        </div>
                    </div>
                </div>
            }
        </fieldset>
    </div>

    <div class="col-8 mt-3" style="display:flex">
        @if (ViewBag.returnContractId != null)
        {
            <a class="btn" asp-action="Details" asp-route-id="@ViewBag.returnContractId">Вернуться</a>
        }
        else
        {
        <a class="btn" asp-action="Index">Вернуться</a>
        }
        <button type="submit" class="btn btn-primary" id="subBtn">Сохранить</button>
    </div>
</form>
@{
    if (TempData["Message"] != null)
    {
        var mes = (string)TempData["Message"];
        <input id="messageInput" onclick="MessageError(document.getElementById('messageInput').value)" value="@mes" hidden />
    }
}
@section Scripts {
    <script type="text/javascript">   
        $(function ($) {
            $('body').on('input', '#CDC', function (e) {
                digits_float(this);
            });
            digits_float('#CDC');
        });

        $(document).ready(function () {

            ////    проверка вводимых дат /////////********/
            //////////////////////////////////////********/
            /*

            Дата договора  -  a / id = DateDC
            Начало работ   -  b / id = DateBeginWork
            Окончание работ - c / id = DateEndWork
            Срок ввода      - d / id = EnteringTerm
            Срок действия   - e / id = ContractTerm

             a<=b
             b<c
             c<=d
             c<e
            */
            let dateContract = document.querySelector("#DateDC");
            let beginWork = document.querySelector("#DateBeginWork");
            let endWork = document.querySelector("#DateEndWork");
            let enteringTm = document.querySelector("#EnteringTerm");
            let contractTm = document.querySelector("#ContractTerm");

            dateContract.addEventListener('change', (e) => {
                let date = dateContract.value;
                let dateBeg = beginWork.value;

                if (date > dateBeg && dateBeg.length > 0) {
                    let datePlusOne = addDays(new Date(date), 0);
                    $("#DateBeginWork").val(date);
                }

                beginWork.setAttribute('min', date);
            });

            beginWork.addEventListener('change', (e) => {
                let date = beginWork.value;
                let dateEnd = endWork.value;

                let datePlusOne = addDays(new Date(date), 1);

                if (date > dateEnd && dateEnd.length > 0) {
                    $("#DateEndWork").val(datePlusOne);
                }

                endWork.setAttribute('min', datePlusOne);
            });

            endWork.addEventListener('change', (e) => {
                let dateET = enteringTm.value;
                let dateCT = contractTm.value;
                let dateEnd = endWork.value;

                let datePlusOne = addDays(new Date(dateEnd), 1);

                if (dateET < dateEnd && dateET.length > 0) {
                    $("#EnteringTerm").val(dateEnd);
                }
                if (dateCT < dateEnd && dateCT.length > 0) {
                    $("#ContractTerm").val(datePlusOne);
                }

                enteringTm.setAttribute('min', dateEnd);
                contractTm.setAttribute('min', datePlusOne);
            });



            function addDays(date, countDays) {
                let dateOfyear = date.getFullYear() + ""; // год;
                console.log(dateOfyear);
                let newDateOfyear = dateOfyear/* .slice(2) */; // год последние две цифры;

                let day = date.getDate(); // текущий день
                day = day < 10 ? "0" + day + countDays : day + countDays;
                let month = date.getMonth() + 1; //текущий месяцж
                month = month < 10 ? "0" + month : month;

                return +newDateOfyear + '-' + +month + '-' + +day;
            }
            //////////////////////////////////////////
            //////////////////////////////////////////



            ///////проверка на взаимоисключающие позиции условий авансирования, если выбрано "Без авансов" - остальные замьюченные, и наоборот/////

            let ch1 = document.querySelector("#check0");
            let ch2 = document.querySelector("#check1");
            let ch3 = document.querySelector("#check2");

            ch1.addEventListener('change', (e) => {
                if (e.currentTarget.checked) {
                    ch2.setAttribute("disabled", true);
                    ch3.setAttribute("disabled", true);
                }

                if (!e.currentTarget.checked) {
                    ch2.removeAttribute("disabled");
                    ch3.removeAttribute("disabled");
                }
            });

            ch2.addEventListener('change', (e) => {
                if (e.currentTarget.checked) {
                    ch1.setAttribute("disabled", true);
                }

                if (!e.currentTarget.checked && !ch3.checked) {
                    ch1.removeAttribute("disabled");
                }

            });

            ch3.addEventListener('change', (e) => {
                if (e.currentTarget.checked) {
                    ch1.setAttribute("disabled", true);
                }

                if (!e.currentTarget.checked && !ch2.checked) {
                    ch1.removeAttribute("disabled");
                }
            });

            ///////



            let styleName = "border:solid red 4px;";

            checkTwoSelectValues("#selectEmpOne", "#selectEmpTwo", "#subBtn", styleName);
            checkTwoSelectValues("#selectEmpTwo", "#selectEmpOne", "#subBtn", styleName);

            // при выборе расчета, за выбранной радио кнопкой вставляем input для заполнения кол-ва дней/числа
            $(".checkChoise").click(function (e) {
                let elemNumber = $("#dayInput");
                $("#inpValueRaschet").remove();
                if (elemNumber !== null || elemNumber !== undefined) {
                    //перед вставкой, проверяем и удаляем если существует такой input у другой радио кнопки
                    $("#dayInput").parent().remove();
                }

                $(this).parent().parent().last().after(`<div class='col-1'><input class='form-control' id="dayInput" type='number' name='PaymentСonditionsDaysRaschet' min='1'></div>`);
            });

            //проверяем введенный номер договора в БД, на наличие
            $("#searchButton").click(function (e) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("ExistContractByNumber","Contracts")',
                    dataType: 'json',
                    data: { contractNumber: $("#NumDC").val() },
                    success: function (resultChecking) {
                        if (resultChecking === true) {
                            alert(`Договор с данным номером существует!`)
                            console.log(resultChecking);
                        }
                        else {
                            alert(`Договор с данным номером не существует!`)
                        }
                    },
                    error: function (ex) {
                        alert('Failed to retrieve departments.' + ex);
                    }
                });
            });

            $("#addOrganization").click(function (e) {
                e.preventDefault();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AddOrganization","Contracts")',
                    dataType: 'html',
                    data: $("#MainForm").serialize(),
                    success: (function (result) {
                        $('#dialogContent').html(result);
                        $('#modDialog').modal('show');
                    })
                });

            });

            /////

            $("#addEmployee").click(function (e) {
                e.preventDefault();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AddEmployee","Contracts")',
                    dataType: 'html',
                    data: $("#MainForm").serialize(),
                    success: (function (result) {
                        $('#dialogContent2').html(result);
                        $('#modDialog2').modal('show');
                    })
                });

            });

            ///

            $("#addTypeWork").click(function (e) {
                e.preventDefault();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AddTypeWork","Contracts")',
                    dataType: 'html',
                    data: $("#MainForm").serialize(),
                    success: (function (result) {
                        $('#dialogContent3').html(result);
                        $('#modDialog3').modal('show');
                    })
                });

            });


        });

        function MessageError(val) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Message", "Home")',
                dataType: 'html',
                data: { message: val },
                success: function (result) {
                    $('#dialogContent').html(result);
                    $('#modDialog').modal({ backdrop: false });
                    $('#modDialog').modal('toggle');
                },
                error: function (result) {
                    console.log(result, 'Ошибка при вызове сообщения');
                }
            })
        }

        window.onload = function () {
            $("#messageInput").trigger('click');
        }
    </script>    
}